package com.keithmackay.api.routes

import com.google.inject.Inject
import com.google.inject.Singleton
import com.keithmackay.api.auth.RequestValidator
import com.keithmackay.api.utils.doc
import com.keithmackay.api.utils.getLogger
import io.javalin.apibuilder.ApiBuilder.get
import io.javalin.apibuilder.ApiBuilder.path
import java.util.regex.Pattern

@Singleton
class FilesRouter @Inject
internal constructor(private val validator: RequestValidator) : Router {
  private val log = getLogger(FilesRouter::class)

  override fun routes() {
    path("files") {
      get("secret.txt") {
        validator.validateThen { username ->
          it.json(doc("hey", username))
        }
      }
      get("rules.lsrules") { ctx ->
        log.info("Request for Little Snitch File")
        val response = khttp.get("https://pgl.yoyo.org/adservers/serverlist.php?hostformat=hosts;showintro=0")
        if (response.statusCode != 200) {
          log.error("HTTP Status ${response.statusCode} from ServerList")
          ctx.status(response.statusCode).result(response.text)
        } else {
          val rules = response.text
              .split("\n")
              .map { it.trim() }
              .filter { it.startsWith("127.0.0.1") }
              .map { it.split(Pattern.compile("\\s")) }
              .filter { it.size == 2 }
              .map { it[1] }
              .mapIndexed { i, server ->
                val time = 1570476664f + i * 4.01
                doc("action", "deny")
                    .append("creationDate", time)
                    .append("modificationDate", time)
                    .append("owner", "any")
                    .append("process", "any")
                    .append("remote-domains", server)

              }

          ctx.json(doc("name", "Keith's Little Snitch Rules")
              .append("rules", rules)
              .append("description", "List of Rules Generated by Keith MacKay's API"))
        }
      }
    }
  }
}